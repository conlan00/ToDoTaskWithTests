using Microsoft.AspNetCore.Mvc.Testing;
using System.Net;
using System.Text;
namespace ToDoTest.Integration
{
    //for this test you should another database/ database for tests 
    // in this simple task i decided not to create new instances of MariaDB
    public class TaskControllerTest :IClassFixture<WebApplicationFactory<Program>>
    {
        private readonly WebApplicationFactory<Program> _factory;
        private readonly HttpClient _client;

        public TaskControllerTest(WebApplicationFactory<Program> factory)
        {
            _factory = factory;
            _client = _factory.CreateClient();
        }
        
        [Theory]
        [InlineData("/api/Tasks")]
        public async Task GetAllTasks_ReturnsOk_WhenTasksExist(string url)
        {
            
            var response = await _client.GetAsync(url);

            // Assert
            response.EnsureSuccessStatusCode(); // 200-299
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
        }

        [Theory]
        [InlineData("/api/Tasks/1")]
        public async Task GetTaskById_ReturnsOk_WhenTaskExists(string url)
        {
            // Act
            var response = await _client.GetAsync(url);

            // Assert
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
        }

        [Theory]
        [InlineData("/api/Tasks/11111")]
        public async Task GetTaskById_ReturnsNotFound_WhenTaskDoesNotExist(string url)
        {
            // get task which not exist using url
            var response = await _client.GetAsync(url);

            // Assert
            Assert.Equal(HttpStatusCode.NotFound, response.StatusCode);
        }

        [Theory]
        [InlineData("/api/tasks")]
        public async Task AddTask_ReturnsOk_WhenTaskIsValid(string url)
        {
            // Arrange
            var newTask = new ToDo.Models.Task
            {
                Id = 0, //not important, casue id is autogenerated
                ExpiryDateTime = DateTime.Parse("2024-10-22T20:59:06.893Z"),
                Title = "New Task",
                Description = "Description of the new task",
                PercentComplete = 0
            };
            var content = new StringContent(System.Text.Json.JsonSerializer.Serialize(newTask), Encoding.UTF8, "application/json");

            var response = await _client.PostAsync(url, content);

            // Assert
            response.EnsureSuccessStatusCode(); // 200-299
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
        }

        [Theory]
        [InlineData("/api/tasks/1")]
        public async Task UpdateTask_ReturnsOk_WhenTaskIsUpdated(string url)
        {
            // Arrange
            var updatedTask = new ToDo.Models.Task
            {
                Id = 1,
                ExpiryDateTime = DateTime.Parse("2024-10-23T20:59:06.893Z"),
                Title = "Updated Task",
                Description = "Updated description",
                PercentComplete = 50//percent is not updated in this operation
            };
            var content = new StringContent(System.Text.Json.JsonSerializer.Serialize(updatedTask), Encoding.UTF8, "application/json");

            
            var response = await _client.PutAsync(url, content);

            // Assert
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
        }

        [Theory]
        [InlineData("/api/tasks/11111")]
        public async Task UpdateTask_ReturnsNotFound_WhenTaskDoesNotExist(string url)
        {
            // Arrange
            var updatedTask = new ToDo.Models.Task
            {
                Id = 11111,
                ExpiryDateTime = DateTime.Parse("2024-10-23T20:59:06.893Z"),
                Title = "Updated Task",
                Description = "Updated description",
                PercentComplete = 50
            };
            var content = new StringContent(System.Text.Json.JsonSerializer.Serialize(updatedTask), Encoding.UTF8, "application/json");

            // Act
            var response = await _client.PutAsync(url, content);

            // Assert
            Assert.Equal(HttpStatusCode.NotFound, response.StatusCode);
        }

        [Theory]
        [InlineData("/api/tasks/1")]
        public async Task DeleteTask_ReturnsNoContent_WhenTaskIsDeleted(string url)
        {
            // Act
            var response = await _client.DeleteAsync(url); 

            // Assert
            Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);
        }

        [Theory]
        [InlineData("/api/tasks/11111")]
        public async Task DeleteTask_ReturnsNotFound_WhenTaskDoesNotExist(string url)
        {
            // Act
            var response = await _client.DeleteAsync(url); 

            // Assert
            Assert.Equal(HttpStatusCode.NotFound, response.StatusCode);
        }
        //depends on your actual state of test db 
        [Theory]
        [InlineData("/api/tasks/getTaskForToday")]
        [InlineData("/api/tasks/getTaskForNextDay")]
        [InlineData("/api/tasks/getTaskForCurrentWeek")]
        public async Task GetTaskForToday_ReturnsOk_WhenTasksExist(string url)
        {
            // Act
            var response = await _client.GetAsync(url);

            // Assert
            response.EnsureSuccessStatusCode(); // 200-299
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
        }
        //depends on your actual state of test db 
        [Theory]
        [InlineData("/api/tasks/getTaskForToday")]
        [InlineData("/api/tasks/getTaskForNextDay")]
        [InlineData("/api/tasks/getTaskForCurrentWeek")]
        public async Task GetTaskForToday_ReturnsNotFound_WhenNoTasksExist(string url)
        {
            // Act
            var response = await _client.GetAsync(url);

            // Assert
            Assert.Equal(HttpStatusCode.NotFound, response.StatusCode);
        }

    }
}

